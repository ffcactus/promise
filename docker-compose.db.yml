version: "3.5"

# A setup with 3 shards, 3 config servers and 2 routers.
#
# Deploy the containers by:
#   docker-compose -f docker-compose.db.yml up -d
#
# Check the containers by:
#   docker ps
# You will see 8 containers deployed by this. Then you need config the shard, config server, and routers.
#
# Configure the config servers by:
#   docker exec -it mongo-cfg1 bash -c "echo 'rs.initiate({_id: \"mongo-conf-set\",configsvr: true, members: [{ _id : 0, host : \"mongo-cfg1\" },{ _id : 1, host : \"mongo-cfg2\" }, { _id : 2, host : \"mongo-cfg3\" }]})' | mongo"
# And check the configuration result by:
#   docker exec -it mongo-cfg1 bash -c "echo 'rs.status()' | mongo"
#
# Configure the shards by:
#   docker exec -it mongo-shard1 bash -c "echo 'rs.initiate({_id : \"mongo-shard-set\", members: [{ _id : 0, host : \"mongo-shard1\" },{ _id : 1, host : \"mongo-shard2\" },{ _id : 2, host : \"mongo-shard3\" }]})' | mongo"
# And check the configuration result by:
#   docker exec -it mongo-shard1 bash -c "echo 'rs.status()' | mongo"
#
# Finally, add the shards to the routers by:
#   docker exec -it mongos1 bash -c "echo 'sh.addShard(\"mongo-shard-set/mongo-shard1\")' | mongo "
#
# And you can check the setup by:
#   docker exec -it mongos1 bash -c "echo 'sh.status()' | mongo "
#
# Now, let's create database and sharding it.
#   docker exec -it mongo-shard1 bash -c "echo 'use promise' | mongo"
#   docker exec -it mongos1 bash -c "echo 'sh.enableSharding(\"promise\")' | mongo "
#   
# For now, you can connect to your setup from routers.
#   mongo --host <your_docker_host> --port 27019
#
# This is base on:
#   https://dzone.com/articles/composing-a-sharded-mongodb-on-docker

services:
  mongo-shard1:
    container_name: mongo-shard1
    image: mongo
    command: mongod --shardsvr --replSet mongo-shard-set --dbpath /data/db --port 27017
    restart: always
    ports:
      - 27017:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mongo_cluster/data1:/data/db
  mongo-shard2:
    container_name: mongo-shard2
    image: mongo
    command: mongod --shardsvr --replSet mongo-shard-set --dbpath /data/db --port 27017
    restart: always
    ports:
      - 27027:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mongo_cluster/data2:/data/db
  mongo-shard3:
    container_name: mongo-shard3
    image: mongo
    command: mongod --shardsvr --replSet mongo-shard-set --dbpath /data/db --port 27017
    restart: always
    ports:
      - 27037:27017
    expose:
      - "27017"
    environment:
      TERM: xterm
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mongo_cluster/data3:/data/db
  mongo-cfg1:
    container_name: mongo-cfg1
    image: mongo
    command: mongod --configsvr --replSet mongo-conf-set --dbpath /data/db --port 27017
    restart: always
    environment:
      TERM: xterm
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mongo_cluster/config1:/data/db
  mongo-cfg2:
    container_name: mongo-cfg2
    image: mongo
    command: mongod --configsvr --replSet mongo-conf-set --dbpath /data/db --port 27017
    restart: always
    environment:
      TERM: xterm
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mongo_cluster/config2:/data/db
  mongo-cfg3:
    container_name: mongo-cfg3
    image: mongo
    command: mongod --configsvr --replSet mongo-conf-set --dbpath /data/db --port 27017
    restart: always
    environment:
      TERM: xterm
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mongo_cluster/config3:/data/db
  mongos1:
    container_name: mongos1
    image: mongo
    depends_on:
      - mongo-cfg1
      - mongo-cfg2
    command: mongos --bind_ip_all --configdb mongo-conf-set/mongo-cfg1:27017,mongo-cfg2:27017,mongo-cfg3:27017 --port 27017
    restart: always
    ports:
      - 27019:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
  mongos2:
    container_name: mongos2
    image: mongo
    depends_on:
      - mongo-cfg1
      - mongo-cfg2
    command: mongos --bind_ip_all --configdb mongo-conf-set/mongo-cfg1:27017,mongo-cfg2:27017,mongo-cfg3:27017 --port 27017
    restart: always
    ports:
      - 27020:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro